// Code generated by go-swagger; DO NOT EDIT.

package items

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"github.com/go-openapi/runtime"

	strfmt "github.com/go-openapi/strfmt"
)

// New creates a new items API client.
func New(transport runtime.ClientTransport, formats strfmt.Registry) *Client {
	return &Client{transport: transport, formats: formats}
}

/*
Client for items API
*/
type Client struct {
	transport runtime.ClientTransport
	formats   strfmt.Registry
}

/*
CreateItem creates an item
*/
func (a *Client) CreateItem(params *CreateItemParams) (*CreateItemCreated, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewCreateItemParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "createItem",
		Method:             "POST",
		PathPattern:        "/items",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &CreateItemReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*CreateItemCreated), nil

}

/*
DeleteItem deletes an item
*/
func (a *Client) DeleteItem(params *DeleteItemParams) (*DeleteItemOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewDeleteItemParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "deleteItem",
		Method:             "DELETE",
		PathPattern:        "/items/{id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &DeleteItemReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*DeleteItemOK), nil

}

/*
DeleteItems deletes all items
*/
func (a *Client) DeleteItems(params *DeleteItemsParams) (*DeleteItemsOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewDeleteItemsParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "deleteItems",
		Method:             "DELETE",
		PathPattern:        "/items",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &DeleteItemsReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*DeleteItemsOK), nil

}

/*
GetItem gets specific item
*/
func (a *Client) GetItem(params *GetItemParams) (*GetItemOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetItemParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "getItem",
		Method:             "GET",
		PathPattern:        "/items/{id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetItemReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetItemOK), nil

}

/*
GetItems gets all items
*/
func (a *Client) GetItems(params *GetItemsParams) (*GetItemsOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetItemsParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "getItems",
		Method:             "GET",
		PathPattern:        "/items",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetItemsReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetItemsOK), nil

}

/*
GetItemsByOwner gets all items by owner
*/
func (a *Client) GetItemsByOwner(params *GetItemsByOwnerParams) (*GetItemsByOwnerOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetItemsByOwnerParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "getItemsByOwner",
		Method:             "GET",
		PathPattern:        "/users/{id}/items",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetItemsByOwnerReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetItemsByOwnerOK), nil

}

/*
UpdateItem updates an item
*/
func (a *Client) UpdateItem(params *UpdateItemParams) (*UpdateItemCreated, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewUpdateItemParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "updateItem",
		Method:             "PUT",
		PathPattern:        "/items/{id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &UpdateItemReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*UpdateItemCreated), nil

}

// SetTransport changes the transport on the client
func (a *Client) SetTransport(transport runtime.ClientTransport) {
	a.transport = transport
}
