// Code generated by go-swagger; DO NOT EDIT.

package subcategories

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"github.com/go-openapi/runtime"

	strfmt "github.com/go-openapi/strfmt"
)

// New creates a new subcategories API client.
func New(transport runtime.ClientTransport, formats strfmt.Registry) *Client {
	return &Client{transport: transport, formats: formats}
}

/*
Client for subcategories API
*/
type Client struct {
	transport runtime.ClientTransport
	formats   strfmt.Registry
}

/*
CreateSubCategory creates a sub category
*/
func (a *Client) CreateSubCategory(params *CreateSubCategoryParams) (*CreateSubCategoryCreated, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewCreateSubCategoryParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "createSubCategory",
		Method:             "POST",
		PathPattern:        "/subcategories",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &CreateSubCategoryReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*CreateSubCategoryCreated), nil

}

/*
CreateSubCategoryByCategory creates a sub category by category
*/
func (a *Client) CreateSubCategoryByCategory(params *CreateSubCategoryByCategoryParams) (*CreateSubCategoryByCategoryCreated, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewCreateSubCategoryByCategoryParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "createSubCategoryByCategory",
		Method:             "POST",
		PathPattern:        "/catagories/{id}/subcategories",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &CreateSubCategoryByCategoryReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*CreateSubCategoryByCategoryCreated), nil

}

/*
DeleteSubCategories deletes all sub categories

removes all subcategories.
*/
func (a *Client) DeleteSubCategories(params *DeleteSubCategoriesParams) (*DeleteSubCategoriesOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewDeleteSubCategoriesParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "deleteSubCategories",
		Method:             "DELETE",
		PathPattern:        "/subcategories",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &DeleteSubCategoriesReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*DeleteSubCategoriesOK), nil

}

/*
DeleteSubCategoriesByCategory deletes all sub categories by category

removes all subcategories from a given category.
*/
func (a *Client) DeleteSubCategoriesByCategory(params *DeleteSubCategoriesByCategoryParams) (*DeleteSubCategoriesByCategoryOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewDeleteSubCategoriesByCategoryParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "deleteSubCategoriesByCategory",
		Method:             "DELETE",
		PathPattern:        "/catagories/{id}/subcategories",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &DeleteSubCategoriesByCategoryReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*DeleteSubCategoriesByCategoryOK), nil

}

/*
DeleteSubCategory deletes a specific sub category

removes a specfic subcategory.
*/
func (a *Client) DeleteSubCategory(params *DeleteSubCategoryParams) (*DeleteSubCategoryOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewDeleteSubCategoryParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "deleteSubCategory",
		Method:             "DELETE",
		PathPattern:        "/subcategories/{id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &DeleteSubCategoryReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*DeleteSubCategoryOK), nil

}

/*
GetSubCategories gets all sub categories
*/
func (a *Client) GetSubCategories(params *GetSubCategoriesParams) (*GetSubCategoriesOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetSubCategoriesParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "getSubCategories",
		Method:             "GET",
		PathPattern:        "/subcategories",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetSubCategoriesReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetSubCategoriesOK), nil

}

/*
GetSubCategoriesByCategory gets all sub categories by category
*/
func (a *Client) GetSubCategoriesByCategory(params *GetSubCategoriesByCategoryParams) (*GetSubCategoriesByCategoryOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetSubCategoriesByCategoryParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "getSubCategoriesByCategory",
		Method:             "GET",
		PathPattern:        "/catagories/{id}/subcategories",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetSubCategoriesByCategoryReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetSubCategoriesByCategoryOK), nil

}

/*
GetSubCategory gets a specific sub category
*/
func (a *Client) GetSubCategory(params *GetSubCategoryParams) (*GetSubCategoryOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetSubCategoryParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "getSubCategory",
		Method:             "GET",
		PathPattern:        "/subcategories/{id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetSubCategoryReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetSubCategoryOK), nil

}

/*
UpdateSubCategory updates a specific sub category
*/
func (a *Client) UpdateSubCategory(params *UpdateSubCategoryParams) (*UpdateSubCategoryCreated, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewUpdateSubCategoryParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "updateSubCategory",
		Method:             "PUT",
		PathPattern:        "/subcategories/{id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &UpdateSubCategoryReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*UpdateSubCategoryCreated), nil

}

// SetTransport changes the transport on the client
func (a *Client) SetTransport(transport runtime.ClientTransport) {
	a.transport = transport
}
