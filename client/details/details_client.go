// Code generated by go-swagger; DO NOT EDIT.

package details

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"github.com/go-openapi/runtime"

	strfmt "github.com/go-openapi/strfmt"
)

// New creates a new details API client.
func New(transport runtime.ClientTransport, formats strfmt.Registry) *Client {
	return &Client{transport: transport, formats: formats}
}

/*
Client for details API
*/
type Client struct {
	transport runtime.ClientTransport
	formats   strfmt.Registry
}

/*
CreateDetail creates a detail
*/
func (a *Client) CreateDetail(params *CreateDetailParams) (*CreateDetailCreated, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewCreateDetailParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "createDetail",
		Method:             "POST",
		PathPattern:        "/details",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &CreateDetailReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*CreateDetailCreated), nil

}

/*
DeleteDetail deletes detail

A detail deletion will also remove all of its descriptors.
*/
func (a *Client) DeleteDetail(params *DeleteDetailParams) (*DeleteDetailOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewDeleteDetailParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "deleteDetail",
		Method:             "DELETE",
		PathPattern:        "/details/{id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &DeleteDetailReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*DeleteDetailOK), nil

}

/*
DeleteDetails deletes all details

a details deletion will also remove all of its descriptors.
*/
func (a *Client) DeleteDetails(params *DeleteDetailsParams) (*DeleteDetailsOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewDeleteDetailsParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "deleteDetails",
		Method:             "DELETE",
		PathPattern:        "/details",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &DeleteDetailsReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*DeleteDetailsOK), nil

}

/*
GetDetail gets a specific detail
*/
func (a *Client) GetDetail(params *GetDetailParams) (*GetDetailOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetDetailParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "getDetail",
		Method:             "GET",
		PathPattern:        "/details/{id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetDetailReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetDetailOK), nil

}

/*
GetDetails gets all details
*/
func (a *Client) GetDetails(params *GetDetailsParams) (*GetDetailsOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetDetailsParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "getDetails",
		Method:             "GET",
		PathPattern:        "/details",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetDetailsReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetDetailsOK), nil

}

/*
UpdateDetail updates a specific detail
*/
func (a *Client) UpdateDetail(params *UpdateDetailParams) (*UpdateDetailCreated, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewUpdateDetailParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "updateDetail",
		Method:             "PUT",
		PathPattern:        "/details/{id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &UpdateDetailReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*UpdateDetailCreated), nil

}

// SetTransport changes the transport on the client
func (a *Client) SetTransport(transport runtime.ClientTransport) {
	a.transport = transport
}
