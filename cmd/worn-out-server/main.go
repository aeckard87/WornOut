// Code generated by go-swagger; DO NOT EDIT.

package main

import (
	"flag"
	"log"
	"os"

	dbpkg "github.com/aeckard87/WornOut/db"
	model "github.com/aeckard87/WornOut/models"
	loads "github.com/go-openapi/loads"
	flags "github.com/jessevdk/go-flags"
	"github.com/jinzhu/gorm"
	_ "github.com/jinzhu/gorm/dialects/mysql"

	"github.com/aeckard87/WornOut/restapi"
	"github.com/aeckard87/WornOut/restapi/operations"
)

// This file was generated by the swagger tool.
// Make sure not to overwrite this file after you generated it because all your edits would be lost!
type Product struct {
	gorm.Model
	Code  string
	Price uint
}

var (
	port = os.Getenv("PORT")
	host = flag.String("host", "0.0.0.0", "HTTP listener host")
)

func main() {

	swaggerSpec, err := loads.Analyzed(restapi.SwaggerJSON, "")
	if err != nil {
		log.Fatalln(err)
	}

	api := operations.NewWornOutAPI(swaggerSpec)
	server := restapi.NewServer(api)
	defer server.Shutdown()

	parser := flags.NewParser(server, flags.Default)
	parser.ShortDescription = "Worn Out"
	parser.LongDescription = "Item API to help define a thing belonging to users, for example clothing."

	//init db
	db := dbpkg.Connect()

	defer db.Close()

	db.AutoMigrate(&model.Category{}, &model.SubCategory{})
	// Add foreign key
	// 1st param : foreignkey field
	// 2nd param : destination table(id)
	// 3rd param : ONDELETE
	// 4th param : ONUPDATE
	// db.Model(&model.SubCategory{}).AddForeignKey("category_id", "categories(id)", "RESTRICT", "RESTRICT")

	//GORM
	// db, err := gorm.Open("mysql", "root:password@/dbname?charset=utf8&parseTime=True&loc=Local")

	// if err != nil {
	// 	panic("failed to connect database")
	// }

	// defer db.Close()

	// // Migrate the schema
	// db.AutoMigrate(&Product{})

	// // Create
	// db.Create(&Product{Code: "L1212", Price: 1000})

	// // Read
	// var product Product
	// db.First(&product, 1)                   // find product with id 1
	// db.First(&product, "code = ?", "L1212") // find product with code l1212

	// // Update - update product's price to 2000
	// db.Model(&product).Update("Price", 2000)

	//-------------GORM END-------------

	server.ConfigureFlags()
	for _, optsGroup := range api.CommandLineOptionsGroups {
		_, err := parser.AddGroup(optsGroup.ShortDescription, optsGroup.LongDescription, optsGroup.Options)
		if err != nil {
			log.Fatalln(err)
		}
	}

	if _, err := parser.Parse(); err != nil {
		code := 1
		if fe, ok := err.(*flags.Error); ok {
			if fe.Type == flags.ErrHelp {
				code = 0
			}
		}
		os.Exit(code)
	}

	server.ConfigureAPI()

	if err := server.Serve(); err != nil {
		log.Fatalln(err)
	}

}
