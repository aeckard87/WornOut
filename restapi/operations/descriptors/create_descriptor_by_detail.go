// Code generated by go-swagger; DO NOT EDIT.

package descriptors

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the generate command

import (
	"net/http"

	middleware "github.com/go-openapi/runtime/middleware"
)

// CreateDescriptorByDetailHandlerFunc turns a function with the right signature into a create descriptor by detail handler
type CreateDescriptorByDetailHandlerFunc func(CreateDescriptorByDetailParams) middleware.Responder

// Handle executing the request and returning a response
func (fn CreateDescriptorByDetailHandlerFunc) Handle(params CreateDescriptorByDetailParams) middleware.Responder {
	return fn(params)
}

// CreateDescriptorByDetailHandler interface for that can handle valid create descriptor by detail params
type CreateDescriptorByDetailHandler interface {
	Handle(CreateDescriptorByDetailParams) middleware.Responder
}

// NewCreateDescriptorByDetail creates a new http.Handler for the create descriptor by detail operation
func NewCreateDescriptorByDetail(ctx *middleware.Context, handler CreateDescriptorByDetailHandler) *CreateDescriptorByDetail {
	return &CreateDescriptorByDetail{Context: ctx, Handler: handler}
}

/*CreateDescriptorByDetail swagger:route POST /details/{id}/descriptors Descriptors createDescriptorByDetail

Create a Descriptor by Detail

*/
type CreateDescriptorByDetail struct {
	Context *middleware.Context
	Handler CreateDescriptorByDetailHandler
}

func (o *CreateDescriptorByDetail) ServeHTTP(rw http.ResponseWriter, r *http.Request) {
	route, rCtx, _ := o.Context.RouteInfo(r)
	if rCtx != nil {
		r = rCtx
	}
	var Params = NewCreateDescriptorByDetailParams()

	if err := o.Context.BindValidRequest(r, route, &Params); err != nil { // bind params
		o.Context.Respond(rw, r, route.Produces, route, err)
		return
	}

	res := o.Handler.Handle(Params) // actually handle the request

	o.Context.Respond(rw, r, route.Produces, route, res)

}
