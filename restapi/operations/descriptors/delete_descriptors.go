// Code generated by go-swagger; DO NOT EDIT.

package descriptors

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the generate command

import (
	"net/http"

	middleware "github.com/go-openapi/runtime/middleware"
)

// DeleteDescriptorsHandlerFunc turns a function with the right signature into a delete descriptors handler
type DeleteDescriptorsHandlerFunc func(DeleteDescriptorsParams) middleware.Responder

// Handle executing the request and returning a response
func (fn DeleteDescriptorsHandlerFunc) Handle(params DeleteDescriptorsParams) middleware.Responder {
	return fn(params)
}

// DeleteDescriptorsHandler interface for that can handle valid delete descriptors params
type DeleteDescriptorsHandler interface {
	Handle(DeleteDescriptorsParams) middleware.Responder
}

// NewDeleteDescriptors creates a new http.Handler for the delete descriptors operation
func NewDeleteDescriptors(ctx *middleware.Context, handler DeleteDescriptorsHandler) *DeleteDescriptors {
	return &DeleteDescriptors{Context: ctx, Handler: handler}
}

/*DeleteDescriptors swagger:route DELETE /descriptors Descriptors deleteDescriptors

Delete all Descriptors

*/
type DeleteDescriptors struct {
	Context *middleware.Context
	Handler DeleteDescriptorsHandler
}

func (o *DeleteDescriptors) ServeHTTP(rw http.ResponseWriter, r *http.Request) {
	route, rCtx, _ := o.Context.RouteInfo(r)
	if rCtx != nil {
		r = rCtx
	}
	var Params = NewDeleteDescriptorsParams()

	if err := o.Context.BindValidRequest(r, route, &Params); err != nil { // bind params
		o.Context.Respond(rw, r, route.Produces, route, err)
		return
	}

	res := o.Handler.Handle(Params) // actually handle the request

	o.Context.Respond(rw, r, route.Produces, route, res)

}
