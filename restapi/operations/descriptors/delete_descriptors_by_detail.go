// Code generated by go-swagger; DO NOT EDIT.

package descriptors

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the generate command

import (
	"net/http"

	middleware "github.com/go-openapi/runtime/middleware"
)

// DeleteDescriptorsByDetailHandlerFunc turns a function with the right signature into a delete descriptors by detail handler
type DeleteDescriptorsByDetailHandlerFunc func(DeleteDescriptorsByDetailParams) middleware.Responder

// Handle executing the request and returning a response
func (fn DeleteDescriptorsByDetailHandlerFunc) Handle(params DeleteDescriptorsByDetailParams) middleware.Responder {
	return fn(params)
}

// DeleteDescriptorsByDetailHandler interface for that can handle valid delete descriptors by detail params
type DeleteDescriptorsByDetailHandler interface {
	Handle(DeleteDescriptorsByDetailParams) middleware.Responder
}

// NewDeleteDescriptorsByDetail creates a new http.Handler for the delete descriptors by detail operation
func NewDeleteDescriptorsByDetail(ctx *middleware.Context, handler DeleteDescriptorsByDetailHandler) *DeleteDescriptorsByDetail {
	return &DeleteDescriptorsByDetail{Context: ctx, Handler: handler}
}

/*DeleteDescriptorsByDetail swagger:route DELETE /details/{id}/descriptors Descriptors deleteDescriptorsByDetail

Delete all Descriptors by Detail

*/
type DeleteDescriptorsByDetail struct {
	Context *middleware.Context
	Handler DeleteDescriptorsByDetailHandler
}

func (o *DeleteDescriptorsByDetail) ServeHTTP(rw http.ResponseWriter, r *http.Request) {
	route, rCtx, _ := o.Context.RouteInfo(r)
	if rCtx != nil {
		r = rCtx
	}
	var Params = NewDeleteDescriptorsByDetailParams()

	if err := o.Context.BindValidRequest(r, route, &Params); err != nil { // bind params
		o.Context.Respond(rw, r, route.Produces, route, err)
		return
	}

	res := o.Handler.Handle(Params) // actually handle the request

	o.Context.Respond(rw, r, route.Produces, route, res)

}
