// Code generated by go-swagger; DO NOT EDIT.

package operations

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"net/http"
	"strings"

	errors "github.com/go-openapi/errors"
	loads "github.com/go-openapi/loads"
	runtime "github.com/go-openapi/runtime"
	middleware "github.com/go-openapi/runtime/middleware"
	security "github.com/go-openapi/runtime/security"
	spec "github.com/go-openapi/spec"
	strfmt "github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"

	"github.com/aeckard87/WornOut/restapi/operations/categories"
	"github.com/aeckard87/WornOut/restapi/operations/descriptors"
	"github.com/aeckard87/WornOut/restapi/operations/details"
	"github.com/aeckard87/WornOut/restapi/operations/items"
	"github.com/aeckard87/WornOut/restapi/operations/subcategories"
	"github.com/aeckard87/WornOut/restapi/operations/users"
)

// NewWornOutAPI creates a new WornOut instance
func NewWornOutAPI(spec *loads.Document) *WornOutAPI {
	return &WornOutAPI{
		handlers:            make(map[string]map[string]http.Handler),
		formats:             strfmt.Default,
		defaultConsumes:     "application/json",
		defaultProduces:     "application/json",
		ServerShutdown:      func() {},
		spec:                spec,
		ServeError:          errors.ServeError,
		BasicAuthenticator:  security.BasicAuth,
		APIKeyAuthenticator: security.APIKeyAuth,
		BearerAuthenticator: security.BearerAuth,
		JSONConsumer:        runtime.JSONConsumer(),
		JSONProducer:        runtime.JSONProducer(),
		CategoriesCreateCategoryHandler: categories.CreateCategoryHandlerFunc(func(params categories.CreateCategoryParams) middleware.Responder {
			return middleware.NotImplemented("operation CategoriesCreateCategory has not yet been implemented")
		}),
		DescriptorsCreateDescriptorByDetailHandler: descriptors.CreateDescriptorByDetailHandlerFunc(func(params descriptors.CreateDescriptorByDetailParams) middleware.Responder {
			return middleware.NotImplemented("operation DescriptorsCreateDescriptorByDetail has not yet been implemented")
		}),
		DetailsCreateDetailHandler: details.CreateDetailHandlerFunc(func(params details.CreateDetailParams) middleware.Responder {
			return middleware.NotImplemented("operation DetailsCreateDetail has not yet been implemented")
		}),
		ItemsCreateItemHandler: items.CreateItemHandlerFunc(func(params items.CreateItemParams) middleware.Responder {
			return middleware.NotImplemented("operation ItemsCreateItem has not yet been implemented")
		}),
		SubcategoriesCreateSubCategoryByCategoryHandler: subcategories.CreateSubCategoryByCategoryHandlerFunc(func(params subcategories.CreateSubCategoryByCategoryParams) middleware.Responder {
			return middleware.NotImplemented("operation SubcategoriesCreateSubCategoryByCategory has not yet been implemented")
		}),
		UsersCreateUserHandler: users.CreateUserHandlerFunc(func(params users.CreateUserParams) middleware.Responder {
			return middleware.NotImplemented("operation UsersCreateUser has not yet been implemented")
		}),
		CategoriesDeleteCategoriesHandler: categories.DeleteCategoriesHandlerFunc(func(params categories.DeleteCategoriesParams) middleware.Responder {
			return middleware.NotImplemented("operation CategoriesDeleteCategories has not yet been implemented")
		}),
		CategoriesDeleteCategoryHandler: categories.DeleteCategoryHandlerFunc(func(params categories.DeleteCategoryParams) middleware.Responder {
			return middleware.NotImplemented("operation CategoriesDeleteCategory has not yet been implemented")
		}),
		DescriptorsDeleteDescriptorHandler: descriptors.DeleteDescriptorHandlerFunc(func(params descriptors.DeleteDescriptorParams) middleware.Responder {
			return middleware.NotImplemented("operation DescriptorsDeleteDescriptor has not yet been implemented")
		}),
		DescriptorsDeleteDescriptorsHandler: descriptors.DeleteDescriptorsHandlerFunc(func(params descriptors.DeleteDescriptorsParams) middleware.Responder {
			return middleware.NotImplemented("operation DescriptorsDeleteDescriptors has not yet been implemented")
		}),
		DescriptorsDeleteDescriptorsByDetailHandler: descriptors.DeleteDescriptorsByDetailHandlerFunc(func(params descriptors.DeleteDescriptorsByDetailParams) middleware.Responder {
			return middleware.NotImplemented("operation DescriptorsDeleteDescriptorsByDetail has not yet been implemented")
		}),
		DetailsDeleteDetailHandler: details.DeleteDetailHandlerFunc(func(params details.DeleteDetailParams) middleware.Responder {
			return middleware.NotImplemented("operation DetailsDeleteDetail has not yet been implemented")
		}),
		DetailsDeleteDetailsHandler: details.DeleteDetailsHandlerFunc(func(params details.DeleteDetailsParams) middleware.Responder {
			return middleware.NotImplemented("operation DetailsDeleteDetails has not yet been implemented")
		}),
		ItemsDeleteItemHandler: items.DeleteItemHandlerFunc(func(params items.DeleteItemParams) middleware.Responder {
			return middleware.NotImplemented("operation ItemsDeleteItem has not yet been implemented")
		}),
		ItemsDeleteItemsHandler: items.DeleteItemsHandlerFunc(func(params items.DeleteItemsParams) middleware.Responder {
			return middleware.NotImplemented("operation ItemsDeleteItems has not yet been implemented")
		}),
		ItemsDeleteItemsByOwnerHandler: items.DeleteItemsByOwnerHandlerFunc(func(params items.DeleteItemsByOwnerParams) middleware.Responder {
			return middleware.NotImplemented("operation ItemsDeleteItemsByOwner has not yet been implemented")
		}),
		ItemsDeleteItemsBySubCategoryHandler: items.DeleteItemsBySubCategoryHandlerFunc(func(params items.DeleteItemsBySubCategoryParams) middleware.Responder {
			return middleware.NotImplemented("operation ItemsDeleteItemsBySubCategory has not yet been implemented")
		}),
		SubcategoriesDeleteSubCategoriesHandler: subcategories.DeleteSubCategoriesHandlerFunc(func(params subcategories.DeleteSubCategoriesParams) middleware.Responder {
			return middleware.NotImplemented("operation SubcategoriesDeleteSubCategories has not yet been implemented")
		}),
		SubcategoriesDeleteSubCategoriesByCategoryHandler: subcategories.DeleteSubCategoriesByCategoryHandlerFunc(func(params subcategories.DeleteSubCategoriesByCategoryParams) middleware.Responder {
			return middleware.NotImplemented("operation SubcategoriesDeleteSubCategoriesByCategory has not yet been implemented")
		}),
		SubcategoriesDeleteSubCategoryHandler: subcategories.DeleteSubCategoryHandlerFunc(func(params subcategories.DeleteSubCategoryParams) middleware.Responder {
			return middleware.NotImplemented("operation SubcategoriesDeleteSubCategory has not yet been implemented")
		}),
		UsersDeleteUserHandler: users.DeleteUserHandlerFunc(func(params users.DeleteUserParams) middleware.Responder {
			return middleware.NotImplemented("operation UsersDeleteUser has not yet been implemented")
		}),
		UsersDeleteUsersHandler: users.DeleteUsersHandlerFunc(func(params users.DeleteUsersParams) middleware.Responder {
			return middleware.NotImplemented("operation UsersDeleteUsers has not yet been implemented")
		}),
		CategoriesGetCategoriesHandler: categories.GetCategoriesHandlerFunc(func(params categories.GetCategoriesParams) middleware.Responder {
			return middleware.NotImplemented("operation CategoriesGetCategories has not yet been implemented")
		}),
		CategoriesGetCategoryHandler: categories.GetCategoryHandlerFunc(func(params categories.GetCategoryParams) middleware.Responder {
			return middleware.NotImplemented("operation CategoriesGetCategory has not yet been implemented")
		}),
		DescriptorsGetDescriptorHandler: descriptors.GetDescriptorHandlerFunc(func(params descriptors.GetDescriptorParams) middleware.Responder {
			return middleware.NotImplemented("operation DescriptorsGetDescriptor has not yet been implemented")
		}),
		DescriptorsGetDescriptorsHandler: descriptors.GetDescriptorsHandlerFunc(func(params descriptors.GetDescriptorsParams) middleware.Responder {
			return middleware.NotImplemented("operation DescriptorsGetDescriptors has not yet been implemented")
		}),
		DescriptorsGetDescriptorsByDetailHandler: descriptors.GetDescriptorsByDetailHandlerFunc(func(params descriptors.GetDescriptorsByDetailParams) middleware.Responder {
			return middleware.NotImplemented("operation DescriptorsGetDescriptorsByDetail has not yet been implemented")
		}),
		DetailsGetDetailHandler: details.GetDetailHandlerFunc(func(params details.GetDetailParams) middleware.Responder {
			return middleware.NotImplemented("operation DetailsGetDetail has not yet been implemented")
		}),
		DetailsGetDetailsHandler: details.GetDetailsHandlerFunc(func(params details.GetDetailsParams) middleware.Responder {
			return middleware.NotImplemented("operation DetailsGetDetails has not yet been implemented")
		}),
		ItemsGetItemHandler: items.GetItemHandlerFunc(func(params items.GetItemParams) middleware.Responder {
			return middleware.NotImplemented("operation ItemsGetItem has not yet been implemented")
		}),
		ItemsGetItemsHandler: items.GetItemsHandlerFunc(func(params items.GetItemsParams) middleware.Responder {
			return middleware.NotImplemented("operation ItemsGetItems has not yet been implemented")
		}),
		ItemsGetItemsByOwnerHandler: items.GetItemsByOwnerHandlerFunc(func(params items.GetItemsByOwnerParams) middleware.Responder {
			return middleware.NotImplemented("operation ItemsGetItemsByOwner has not yet been implemented")
		}),
		ItemsGetItemsBySubCategoryHandler: items.GetItemsBySubCategoryHandlerFunc(func(params items.GetItemsBySubCategoryParams) middleware.Responder {
			return middleware.NotImplemented("operation ItemsGetItemsBySubCategory has not yet been implemented")
		}),
		SubcategoriesGetSubCategoriesHandler: subcategories.GetSubCategoriesHandlerFunc(func(params subcategories.GetSubCategoriesParams) middleware.Responder {
			return middleware.NotImplemented("operation SubcategoriesGetSubCategories has not yet been implemented")
		}),
		SubcategoriesGetSubCategoriesByCategoryHandler: subcategories.GetSubCategoriesByCategoryHandlerFunc(func(params subcategories.GetSubCategoriesByCategoryParams) middleware.Responder {
			return middleware.NotImplemented("operation SubcategoriesGetSubCategoriesByCategory has not yet been implemented")
		}),
		SubcategoriesGetSubCategoryHandler: subcategories.GetSubCategoryHandlerFunc(func(params subcategories.GetSubCategoryParams) middleware.Responder {
			return middleware.NotImplemented("operation SubcategoriesGetSubCategory has not yet been implemented")
		}),
		UsersGetUserHandler: users.GetUserHandlerFunc(func(params users.GetUserParams) middleware.Responder {
			return middleware.NotImplemented("operation UsersGetUser has not yet been implemented")
		}),
		UsersGetUsersHandler: users.GetUsersHandlerFunc(func(params users.GetUsersParams) middleware.Responder {
			return middleware.NotImplemented("operation UsersGetUsers has not yet been implemented")
		}),
		CategoriesUpdateCategoryHandler: categories.UpdateCategoryHandlerFunc(func(params categories.UpdateCategoryParams) middleware.Responder {
			return middleware.NotImplemented("operation CategoriesUpdateCategory has not yet been implemented")
		}),
		DescriptorsUpdateDescriptorHandler: descriptors.UpdateDescriptorHandlerFunc(func(params descriptors.UpdateDescriptorParams) middleware.Responder {
			return middleware.NotImplemented("operation DescriptorsUpdateDescriptor has not yet been implemented")
		}),
		DetailsUpdateDetailHandler: details.UpdateDetailHandlerFunc(func(params details.UpdateDetailParams) middleware.Responder {
			return middleware.NotImplemented("operation DetailsUpdateDetail has not yet been implemented")
		}),
		ItemsUpdateItemHandler: items.UpdateItemHandlerFunc(func(params items.UpdateItemParams) middleware.Responder {
			return middleware.NotImplemented("operation ItemsUpdateItem has not yet been implemented")
		}),
		SubcategoriesUpdateSubCategoryHandler: subcategories.UpdateSubCategoryHandlerFunc(func(params subcategories.UpdateSubCategoryParams) middleware.Responder {
			return middleware.NotImplemented("operation SubcategoriesUpdateSubCategory has not yet been implemented")
		}),
		UsersUpdateUserHandler: users.UpdateUserHandlerFunc(func(params users.UpdateUserParams) middleware.Responder {
			return middleware.NotImplemented("operation UsersUpdateUser has not yet been implemented")
		}),
	}
}

/*WornOutAPI Item API to help define a thing belonging to users, for example clothing. */
type WornOutAPI struct {
	spec            *loads.Document
	context         *middleware.Context
	handlers        map[string]map[string]http.Handler
	formats         strfmt.Registry
	defaultConsumes string
	defaultProduces string
	Middleware      func(middleware.Builder) http.Handler

	// BasicAuthenticator generates a runtime.Authenticator from the supplied basic auth function.
	// It has a default implemention in the security package, however you can replace it for your particular usage.
	BasicAuthenticator func(security.UserPassAuthentication) runtime.Authenticator
	// APIKeyAuthenticator generates a runtime.Authenticator from the supplied token auth function.
	// It has a default implemention in the security package, however you can replace it for your particular usage.
	APIKeyAuthenticator func(string, string, security.TokenAuthentication) runtime.Authenticator
	// BearerAuthenticator generates a runtime.Authenticator from the supplied bearer token auth function.
	// It has a default implemention in the security package, however you can replace it for your particular usage.
	BearerAuthenticator func(string, security.ScopedTokenAuthentication) runtime.Authenticator

	// JSONConsumer registers a consumer for a "application/json" mime type
	JSONConsumer runtime.Consumer

	// JSONProducer registers a producer for a "application/json" mime type
	JSONProducer runtime.Producer

	// CategoriesCreateCategoryHandler sets the operation handler for the create category operation
	CategoriesCreateCategoryHandler categories.CreateCategoryHandler
	// DescriptorsCreateDescriptorByDetailHandler sets the operation handler for the create descriptor by detail operation
	DescriptorsCreateDescriptorByDetailHandler descriptors.CreateDescriptorByDetailHandler
	// DetailsCreateDetailHandler sets the operation handler for the create detail operation
	DetailsCreateDetailHandler details.CreateDetailHandler
	// ItemsCreateItemHandler sets the operation handler for the create item operation
	ItemsCreateItemHandler items.CreateItemHandler
	// SubcategoriesCreateSubCategoryByCategoryHandler sets the operation handler for the create sub category by category operation
	SubcategoriesCreateSubCategoryByCategoryHandler subcategories.CreateSubCategoryByCategoryHandler
	// UsersCreateUserHandler sets the operation handler for the create user operation
	UsersCreateUserHandler users.CreateUserHandler
	// CategoriesDeleteCategoriesHandler sets the operation handler for the delete categories operation
	CategoriesDeleteCategoriesHandler categories.DeleteCategoriesHandler
	// CategoriesDeleteCategoryHandler sets the operation handler for the delete category operation
	CategoriesDeleteCategoryHandler categories.DeleteCategoryHandler
	// DescriptorsDeleteDescriptorHandler sets the operation handler for the delete descriptor operation
	DescriptorsDeleteDescriptorHandler descriptors.DeleteDescriptorHandler
	// DescriptorsDeleteDescriptorsHandler sets the operation handler for the delete descriptors operation
	DescriptorsDeleteDescriptorsHandler descriptors.DeleteDescriptorsHandler
	// DescriptorsDeleteDescriptorsByDetailHandler sets the operation handler for the delete descriptors by detail operation
	DescriptorsDeleteDescriptorsByDetailHandler descriptors.DeleteDescriptorsByDetailHandler
	// DetailsDeleteDetailHandler sets the operation handler for the delete detail operation
	DetailsDeleteDetailHandler details.DeleteDetailHandler
	// DetailsDeleteDetailsHandler sets the operation handler for the delete details operation
	DetailsDeleteDetailsHandler details.DeleteDetailsHandler
	// ItemsDeleteItemHandler sets the operation handler for the delete item operation
	ItemsDeleteItemHandler items.DeleteItemHandler
	// ItemsDeleteItemsHandler sets the operation handler for the delete items operation
	ItemsDeleteItemsHandler items.DeleteItemsHandler
	// ItemsDeleteItemsByOwnerHandler sets the operation handler for the delete items by owner operation
	ItemsDeleteItemsByOwnerHandler items.DeleteItemsByOwnerHandler
	// ItemsDeleteItemsBySubCategoryHandler sets the operation handler for the delete items by sub category operation
	ItemsDeleteItemsBySubCategoryHandler items.DeleteItemsBySubCategoryHandler
	// SubcategoriesDeleteSubCategoriesHandler sets the operation handler for the delete sub categories operation
	SubcategoriesDeleteSubCategoriesHandler subcategories.DeleteSubCategoriesHandler
	// SubcategoriesDeleteSubCategoriesByCategoryHandler sets the operation handler for the delete sub categories by category operation
	SubcategoriesDeleteSubCategoriesByCategoryHandler subcategories.DeleteSubCategoriesByCategoryHandler
	// SubcategoriesDeleteSubCategoryHandler sets the operation handler for the delete sub category operation
	SubcategoriesDeleteSubCategoryHandler subcategories.DeleteSubCategoryHandler
	// UsersDeleteUserHandler sets the operation handler for the delete user operation
	UsersDeleteUserHandler users.DeleteUserHandler
	// UsersDeleteUsersHandler sets the operation handler for the delete users operation
	UsersDeleteUsersHandler users.DeleteUsersHandler
	// CategoriesGetCategoriesHandler sets the operation handler for the get categories operation
	CategoriesGetCategoriesHandler categories.GetCategoriesHandler
	// CategoriesGetCategoryHandler sets the operation handler for the get category operation
	CategoriesGetCategoryHandler categories.GetCategoryHandler
	// DescriptorsGetDescriptorHandler sets the operation handler for the get descriptor operation
	DescriptorsGetDescriptorHandler descriptors.GetDescriptorHandler
	// DescriptorsGetDescriptorsHandler sets the operation handler for the get descriptors operation
	DescriptorsGetDescriptorsHandler descriptors.GetDescriptorsHandler
	// DescriptorsGetDescriptorsByDetailHandler sets the operation handler for the get descriptors by detail operation
	DescriptorsGetDescriptorsByDetailHandler descriptors.GetDescriptorsByDetailHandler
	// DetailsGetDetailHandler sets the operation handler for the get detail operation
	DetailsGetDetailHandler details.GetDetailHandler
	// DetailsGetDetailsHandler sets the operation handler for the get details operation
	DetailsGetDetailsHandler details.GetDetailsHandler
	// ItemsGetItemHandler sets the operation handler for the get item operation
	ItemsGetItemHandler items.GetItemHandler
	// ItemsGetItemsHandler sets the operation handler for the get items operation
	ItemsGetItemsHandler items.GetItemsHandler
	// ItemsGetItemsByOwnerHandler sets the operation handler for the get items by owner operation
	ItemsGetItemsByOwnerHandler items.GetItemsByOwnerHandler
	// ItemsGetItemsBySubCategoryHandler sets the operation handler for the get items by sub category operation
	ItemsGetItemsBySubCategoryHandler items.GetItemsBySubCategoryHandler
	// SubcategoriesGetSubCategoriesHandler sets the operation handler for the get sub categories operation
	SubcategoriesGetSubCategoriesHandler subcategories.GetSubCategoriesHandler
	// SubcategoriesGetSubCategoriesByCategoryHandler sets the operation handler for the get sub categories by category operation
	SubcategoriesGetSubCategoriesByCategoryHandler subcategories.GetSubCategoriesByCategoryHandler
	// SubcategoriesGetSubCategoryHandler sets the operation handler for the get sub category operation
	SubcategoriesGetSubCategoryHandler subcategories.GetSubCategoryHandler
	// UsersGetUserHandler sets the operation handler for the get user operation
	UsersGetUserHandler users.GetUserHandler
	// UsersGetUsersHandler sets the operation handler for the get users operation
	UsersGetUsersHandler users.GetUsersHandler
	// CategoriesUpdateCategoryHandler sets the operation handler for the update category operation
	CategoriesUpdateCategoryHandler categories.UpdateCategoryHandler
	// DescriptorsUpdateDescriptorHandler sets the operation handler for the update descriptor operation
	DescriptorsUpdateDescriptorHandler descriptors.UpdateDescriptorHandler
	// DetailsUpdateDetailHandler sets the operation handler for the update detail operation
	DetailsUpdateDetailHandler details.UpdateDetailHandler
	// ItemsUpdateItemHandler sets the operation handler for the update item operation
	ItemsUpdateItemHandler items.UpdateItemHandler
	// SubcategoriesUpdateSubCategoryHandler sets the operation handler for the update sub category operation
	SubcategoriesUpdateSubCategoryHandler subcategories.UpdateSubCategoryHandler
	// UsersUpdateUserHandler sets the operation handler for the update user operation
	UsersUpdateUserHandler users.UpdateUserHandler

	// ServeError is called when an error is received, there is a default handler
	// but you can set your own with this
	ServeError func(http.ResponseWriter, *http.Request, error)

	// ServerShutdown is called when the HTTP(S) server is shut down and done
	// handling all active connections and does not accept connections any more
	ServerShutdown func()

	// Custom command line argument groups with their descriptions
	CommandLineOptionsGroups []swag.CommandLineOptionsGroup

	// User defined logger function.
	Logger func(string, ...interface{})
}

// SetDefaultProduces sets the default produces media type
func (o *WornOutAPI) SetDefaultProduces(mediaType string) {
	o.defaultProduces = mediaType
}

// SetDefaultConsumes returns the default consumes media type
func (o *WornOutAPI) SetDefaultConsumes(mediaType string) {
	o.defaultConsumes = mediaType
}

// SetSpec sets a spec that will be served for the clients.
func (o *WornOutAPI) SetSpec(spec *loads.Document) {
	o.spec = spec
}

// DefaultProduces returns the default produces media type
func (o *WornOutAPI) DefaultProduces() string {
	return o.defaultProduces
}

// DefaultConsumes returns the default consumes media type
func (o *WornOutAPI) DefaultConsumes() string {
	return o.defaultConsumes
}

// Formats returns the registered string formats
func (o *WornOutAPI) Formats() strfmt.Registry {
	return o.formats
}

// RegisterFormat registers a custom format validator
func (o *WornOutAPI) RegisterFormat(name string, format strfmt.Format, validator strfmt.Validator) {
	o.formats.Add(name, format, validator)
}

// Validate validates the registrations in the WornOutAPI
func (o *WornOutAPI) Validate() error {
	var unregistered []string

	if o.JSONConsumer == nil {
		unregistered = append(unregistered, "JSONConsumer")
	}

	if o.JSONProducer == nil {
		unregistered = append(unregistered, "JSONProducer")
	}

	if o.CategoriesCreateCategoryHandler == nil {
		unregistered = append(unregistered, "categories.CreateCategoryHandler")
	}

	if o.DescriptorsCreateDescriptorByDetailHandler == nil {
		unregistered = append(unregistered, "descriptors.CreateDescriptorByDetailHandler")
	}

	if o.DetailsCreateDetailHandler == nil {
		unregistered = append(unregistered, "details.CreateDetailHandler")
	}

	if o.ItemsCreateItemHandler == nil {
		unregistered = append(unregistered, "items.CreateItemHandler")
	}

	if o.SubcategoriesCreateSubCategoryByCategoryHandler == nil {
		unregistered = append(unregistered, "subcategories.CreateSubCategoryByCategoryHandler")
	}

	if o.UsersCreateUserHandler == nil {
		unregistered = append(unregistered, "users.CreateUserHandler")
	}

	if o.CategoriesDeleteCategoriesHandler == nil {
		unregistered = append(unregistered, "categories.DeleteCategoriesHandler")
	}

	if o.CategoriesDeleteCategoryHandler == nil {
		unregistered = append(unregistered, "categories.DeleteCategoryHandler")
	}

	if o.DescriptorsDeleteDescriptorHandler == nil {
		unregistered = append(unregistered, "descriptors.DeleteDescriptorHandler")
	}

	if o.DescriptorsDeleteDescriptorsHandler == nil {
		unregistered = append(unregistered, "descriptors.DeleteDescriptorsHandler")
	}

	if o.DescriptorsDeleteDescriptorsByDetailHandler == nil {
		unregistered = append(unregistered, "descriptors.DeleteDescriptorsByDetailHandler")
	}

	if o.DetailsDeleteDetailHandler == nil {
		unregistered = append(unregistered, "details.DeleteDetailHandler")
	}

	if o.DetailsDeleteDetailsHandler == nil {
		unregistered = append(unregistered, "details.DeleteDetailsHandler")
	}

	if o.ItemsDeleteItemHandler == nil {
		unregistered = append(unregistered, "items.DeleteItemHandler")
	}

	if o.ItemsDeleteItemsHandler == nil {
		unregistered = append(unregistered, "items.DeleteItemsHandler")
	}

	if o.ItemsDeleteItemsByOwnerHandler == nil {
		unregistered = append(unregistered, "items.DeleteItemsByOwnerHandler")
	}

	if o.ItemsDeleteItemsBySubCategoryHandler == nil {
		unregistered = append(unregistered, "items.DeleteItemsBySubCategoryHandler")
	}

	if o.SubcategoriesDeleteSubCategoriesHandler == nil {
		unregistered = append(unregistered, "subcategories.DeleteSubCategoriesHandler")
	}

	if o.SubcategoriesDeleteSubCategoriesByCategoryHandler == nil {
		unregistered = append(unregistered, "subcategories.DeleteSubCategoriesByCategoryHandler")
	}

	if o.SubcategoriesDeleteSubCategoryHandler == nil {
		unregistered = append(unregistered, "subcategories.DeleteSubCategoryHandler")
	}

	if o.UsersDeleteUserHandler == nil {
		unregistered = append(unregistered, "users.DeleteUserHandler")
	}

	if o.UsersDeleteUsersHandler == nil {
		unregistered = append(unregistered, "users.DeleteUsersHandler")
	}

	if o.CategoriesGetCategoriesHandler == nil {
		unregistered = append(unregistered, "categories.GetCategoriesHandler")
	}

	if o.CategoriesGetCategoryHandler == nil {
		unregistered = append(unregistered, "categories.GetCategoryHandler")
	}

	if o.DescriptorsGetDescriptorHandler == nil {
		unregistered = append(unregistered, "descriptors.GetDescriptorHandler")
	}

	if o.DescriptorsGetDescriptorsHandler == nil {
		unregistered = append(unregistered, "descriptors.GetDescriptorsHandler")
	}

	if o.DescriptorsGetDescriptorsByDetailHandler == nil {
		unregistered = append(unregistered, "descriptors.GetDescriptorsByDetailHandler")
	}

	if o.DetailsGetDetailHandler == nil {
		unregistered = append(unregistered, "details.GetDetailHandler")
	}

	if o.DetailsGetDetailsHandler == nil {
		unregistered = append(unregistered, "details.GetDetailsHandler")
	}

	if o.ItemsGetItemHandler == nil {
		unregistered = append(unregistered, "items.GetItemHandler")
	}

	if o.ItemsGetItemsHandler == nil {
		unregistered = append(unregistered, "items.GetItemsHandler")
	}

	if o.ItemsGetItemsByOwnerHandler == nil {
		unregistered = append(unregistered, "items.GetItemsByOwnerHandler")
	}

	if o.ItemsGetItemsBySubCategoryHandler == nil {
		unregistered = append(unregistered, "items.GetItemsBySubCategoryHandler")
	}

	if o.SubcategoriesGetSubCategoriesHandler == nil {
		unregistered = append(unregistered, "subcategories.GetSubCategoriesHandler")
	}

	if o.SubcategoriesGetSubCategoriesByCategoryHandler == nil {
		unregistered = append(unregistered, "subcategories.GetSubCategoriesByCategoryHandler")
	}

	if o.SubcategoriesGetSubCategoryHandler == nil {
		unregistered = append(unregistered, "subcategories.GetSubCategoryHandler")
	}

	if o.UsersGetUserHandler == nil {
		unregistered = append(unregistered, "users.GetUserHandler")
	}

	if o.UsersGetUsersHandler == nil {
		unregistered = append(unregistered, "users.GetUsersHandler")
	}

	if o.CategoriesUpdateCategoryHandler == nil {
		unregistered = append(unregistered, "categories.UpdateCategoryHandler")
	}

	if o.DescriptorsUpdateDescriptorHandler == nil {
		unregistered = append(unregistered, "descriptors.UpdateDescriptorHandler")
	}

	if o.DetailsUpdateDetailHandler == nil {
		unregistered = append(unregistered, "details.UpdateDetailHandler")
	}

	if o.ItemsUpdateItemHandler == nil {
		unregistered = append(unregistered, "items.UpdateItemHandler")
	}

	if o.SubcategoriesUpdateSubCategoryHandler == nil {
		unregistered = append(unregistered, "subcategories.UpdateSubCategoryHandler")
	}

	if o.UsersUpdateUserHandler == nil {
		unregistered = append(unregistered, "users.UpdateUserHandler")
	}

	if len(unregistered) > 0 {
		return fmt.Errorf("missing registration: %s", strings.Join(unregistered, ", "))
	}

	return nil
}

// ServeErrorFor gets a error handler for a given operation id
func (o *WornOutAPI) ServeErrorFor(operationID string) func(http.ResponseWriter, *http.Request, error) {
	return o.ServeError
}

// AuthenticatorsFor gets the authenticators for the specified security schemes
func (o *WornOutAPI) AuthenticatorsFor(schemes map[string]spec.SecurityScheme) map[string]runtime.Authenticator {

	return nil

}

// Authorizer returns the registered authorizer
func (o *WornOutAPI) Authorizer() runtime.Authorizer {

	return nil

}

// ConsumersFor gets the consumers for the specified media types
func (o *WornOutAPI) ConsumersFor(mediaTypes []string) map[string]runtime.Consumer {

	result := make(map[string]runtime.Consumer)
	for _, mt := range mediaTypes {
		switch mt {

		case "application/json":
			result["application/json"] = o.JSONConsumer

		}
	}
	return result

}

// ProducersFor gets the producers for the specified media types
func (o *WornOutAPI) ProducersFor(mediaTypes []string) map[string]runtime.Producer {

	result := make(map[string]runtime.Producer)
	for _, mt := range mediaTypes {
		switch mt {

		case "application/json":
			result["application/json"] = o.JSONProducer

		}
	}
	return result

}

// HandlerFor gets a http.Handler for the provided operation method and path
func (o *WornOutAPI) HandlerFor(method, path string) (http.Handler, bool) {
	if o.handlers == nil {
		return nil, false
	}
	um := strings.ToUpper(method)
	if _, ok := o.handlers[um]; !ok {
		return nil, false
	}
	if path == "/" {
		path = ""
	}
	h, ok := o.handlers[um][path]
	return h, ok
}

// Context returns the middleware context for the worn out API
func (o *WornOutAPI) Context() *middleware.Context {
	if o.context == nil {
		o.context = middleware.NewRoutableContext(o.spec, o, nil)
	}

	return o.context
}

func (o *WornOutAPI) initHandlerCache() {
	o.Context() // don't care about the result, just that the initialization happened

	if o.handlers == nil {
		o.handlers = make(map[string]map[string]http.Handler)
	}

	if o.handlers["POST"] == nil {
		o.handlers["POST"] = make(map[string]http.Handler)
	}
	o.handlers["POST"]["/categories"] = categories.NewCreateCategory(o.context, o.CategoriesCreateCategoryHandler)

	if o.handlers["POST"] == nil {
		o.handlers["POST"] = make(map[string]http.Handler)
	}
	o.handlers["POST"]["/details/{id}/descriptors"] = descriptors.NewCreateDescriptorByDetail(o.context, o.DescriptorsCreateDescriptorByDetailHandler)

	if o.handlers["POST"] == nil {
		o.handlers["POST"] = make(map[string]http.Handler)
	}
	o.handlers["POST"]["/details"] = details.NewCreateDetail(o.context, o.DetailsCreateDetailHandler)

	if o.handlers["POST"] == nil {
		o.handlers["POST"] = make(map[string]http.Handler)
	}
	o.handlers["POST"]["/users/{id}/items"] = items.NewCreateItem(o.context, o.ItemsCreateItemHandler)

	if o.handlers["POST"] == nil {
		o.handlers["POST"] = make(map[string]http.Handler)
	}
	o.handlers["POST"]["/categories/{id}/subcategories"] = subcategories.NewCreateSubCategoryByCategory(o.context, o.SubcategoriesCreateSubCategoryByCategoryHandler)

	if o.handlers["POST"] == nil {
		o.handlers["POST"] = make(map[string]http.Handler)
	}
	o.handlers["POST"]["/users"] = users.NewCreateUser(o.context, o.UsersCreateUserHandler)

	if o.handlers["DELETE"] == nil {
		o.handlers["DELETE"] = make(map[string]http.Handler)
	}
	o.handlers["DELETE"]["/categories"] = categories.NewDeleteCategories(o.context, o.CategoriesDeleteCategoriesHandler)

	if o.handlers["DELETE"] == nil {
		o.handlers["DELETE"] = make(map[string]http.Handler)
	}
	o.handlers["DELETE"]["/categories/{id}"] = categories.NewDeleteCategory(o.context, o.CategoriesDeleteCategoryHandler)

	if o.handlers["DELETE"] == nil {
		o.handlers["DELETE"] = make(map[string]http.Handler)
	}
	o.handlers["DELETE"]["/descriptors/{id}"] = descriptors.NewDeleteDescriptor(o.context, o.DescriptorsDeleteDescriptorHandler)

	if o.handlers["DELETE"] == nil {
		o.handlers["DELETE"] = make(map[string]http.Handler)
	}
	o.handlers["DELETE"]["/descriptors"] = descriptors.NewDeleteDescriptors(o.context, o.DescriptorsDeleteDescriptorsHandler)

	if o.handlers["DELETE"] == nil {
		o.handlers["DELETE"] = make(map[string]http.Handler)
	}
	o.handlers["DELETE"]["/details/{id}/descriptors"] = descriptors.NewDeleteDescriptorsByDetail(o.context, o.DescriptorsDeleteDescriptorsByDetailHandler)

	if o.handlers["DELETE"] == nil {
		o.handlers["DELETE"] = make(map[string]http.Handler)
	}
	o.handlers["DELETE"]["/details/{id}"] = details.NewDeleteDetail(o.context, o.DetailsDeleteDetailHandler)

	if o.handlers["DELETE"] == nil {
		o.handlers["DELETE"] = make(map[string]http.Handler)
	}
	o.handlers["DELETE"]["/details"] = details.NewDeleteDetails(o.context, o.DetailsDeleteDetailsHandler)

	if o.handlers["DELETE"] == nil {
		o.handlers["DELETE"] = make(map[string]http.Handler)
	}
	o.handlers["DELETE"]["/items/{id}"] = items.NewDeleteItem(o.context, o.ItemsDeleteItemHandler)

	if o.handlers["DELETE"] == nil {
		o.handlers["DELETE"] = make(map[string]http.Handler)
	}
	o.handlers["DELETE"]["/items"] = items.NewDeleteItems(o.context, o.ItemsDeleteItemsHandler)

	if o.handlers["DELETE"] == nil {
		o.handlers["DELETE"] = make(map[string]http.Handler)
	}
	o.handlers["DELETE"]["/users/{id}/items"] = items.NewDeleteItemsByOwner(o.context, o.ItemsDeleteItemsByOwnerHandler)

	if o.handlers["DELETE"] == nil {
		o.handlers["DELETE"] = make(map[string]http.Handler)
	}
	o.handlers["DELETE"]["/subcategories/{id}/items"] = items.NewDeleteItemsBySubCategory(o.context, o.ItemsDeleteItemsBySubCategoryHandler)

	if o.handlers["DELETE"] == nil {
		o.handlers["DELETE"] = make(map[string]http.Handler)
	}
	o.handlers["DELETE"]["/subcategories"] = subcategories.NewDeleteSubCategories(o.context, o.SubcategoriesDeleteSubCategoriesHandler)

	if o.handlers["DELETE"] == nil {
		o.handlers["DELETE"] = make(map[string]http.Handler)
	}
	o.handlers["DELETE"]["/categories/{id}/subcategories"] = subcategories.NewDeleteSubCategoriesByCategory(o.context, o.SubcategoriesDeleteSubCategoriesByCategoryHandler)

	if o.handlers["DELETE"] == nil {
		o.handlers["DELETE"] = make(map[string]http.Handler)
	}
	o.handlers["DELETE"]["/subcategories/{id}"] = subcategories.NewDeleteSubCategory(o.context, o.SubcategoriesDeleteSubCategoryHandler)

	if o.handlers["DELETE"] == nil {
		o.handlers["DELETE"] = make(map[string]http.Handler)
	}
	o.handlers["DELETE"]["/users/{id}"] = users.NewDeleteUser(o.context, o.UsersDeleteUserHandler)

	if o.handlers["DELETE"] == nil {
		o.handlers["DELETE"] = make(map[string]http.Handler)
	}
	o.handlers["DELETE"]["/users"] = users.NewDeleteUsers(o.context, o.UsersDeleteUsersHandler)

	if o.handlers["GET"] == nil {
		o.handlers["GET"] = make(map[string]http.Handler)
	}
	o.handlers["GET"]["/categories"] = categories.NewGetCategories(o.context, o.CategoriesGetCategoriesHandler)

	if o.handlers["GET"] == nil {
		o.handlers["GET"] = make(map[string]http.Handler)
	}
	o.handlers["GET"]["/categories/{id}"] = categories.NewGetCategory(o.context, o.CategoriesGetCategoryHandler)

	if o.handlers["GET"] == nil {
		o.handlers["GET"] = make(map[string]http.Handler)
	}
	o.handlers["GET"]["/descriptors/{id}"] = descriptors.NewGetDescriptor(o.context, o.DescriptorsGetDescriptorHandler)

	if o.handlers["GET"] == nil {
		o.handlers["GET"] = make(map[string]http.Handler)
	}
	o.handlers["GET"]["/descriptors"] = descriptors.NewGetDescriptors(o.context, o.DescriptorsGetDescriptorsHandler)

	if o.handlers["GET"] == nil {
		o.handlers["GET"] = make(map[string]http.Handler)
	}
	o.handlers["GET"]["/details/{id}/descriptors"] = descriptors.NewGetDescriptorsByDetail(o.context, o.DescriptorsGetDescriptorsByDetailHandler)

	if o.handlers["GET"] == nil {
		o.handlers["GET"] = make(map[string]http.Handler)
	}
	o.handlers["GET"]["/details/{id}"] = details.NewGetDetail(o.context, o.DetailsGetDetailHandler)

	if o.handlers["GET"] == nil {
		o.handlers["GET"] = make(map[string]http.Handler)
	}
	o.handlers["GET"]["/details"] = details.NewGetDetails(o.context, o.DetailsGetDetailsHandler)

	if o.handlers["GET"] == nil {
		o.handlers["GET"] = make(map[string]http.Handler)
	}
	o.handlers["GET"]["/items/{id}"] = items.NewGetItem(o.context, o.ItemsGetItemHandler)

	if o.handlers["GET"] == nil {
		o.handlers["GET"] = make(map[string]http.Handler)
	}
	o.handlers["GET"]["/items"] = items.NewGetItems(o.context, o.ItemsGetItemsHandler)

	if o.handlers["GET"] == nil {
		o.handlers["GET"] = make(map[string]http.Handler)
	}
	o.handlers["GET"]["/users/{id}/items"] = items.NewGetItemsByOwner(o.context, o.ItemsGetItemsByOwnerHandler)

	if o.handlers["GET"] == nil {
		o.handlers["GET"] = make(map[string]http.Handler)
	}
	o.handlers["GET"]["/subcategories/{id}/items"] = items.NewGetItemsBySubCategory(o.context, o.ItemsGetItemsBySubCategoryHandler)

	if o.handlers["GET"] == nil {
		o.handlers["GET"] = make(map[string]http.Handler)
	}
	o.handlers["GET"]["/subcategories"] = subcategories.NewGetSubCategories(o.context, o.SubcategoriesGetSubCategoriesHandler)

	if o.handlers["GET"] == nil {
		o.handlers["GET"] = make(map[string]http.Handler)
	}
	o.handlers["GET"]["/categories/{id}/subcategories"] = subcategories.NewGetSubCategoriesByCategory(o.context, o.SubcategoriesGetSubCategoriesByCategoryHandler)

	if o.handlers["GET"] == nil {
		o.handlers["GET"] = make(map[string]http.Handler)
	}
	o.handlers["GET"]["/subcategories/{id}"] = subcategories.NewGetSubCategory(o.context, o.SubcategoriesGetSubCategoryHandler)

	if o.handlers["GET"] == nil {
		o.handlers["GET"] = make(map[string]http.Handler)
	}
	o.handlers["GET"]["/users/{id}"] = users.NewGetUser(o.context, o.UsersGetUserHandler)

	if o.handlers["GET"] == nil {
		o.handlers["GET"] = make(map[string]http.Handler)
	}
	o.handlers["GET"]["/users"] = users.NewGetUsers(o.context, o.UsersGetUsersHandler)

	if o.handlers["PUT"] == nil {
		o.handlers["PUT"] = make(map[string]http.Handler)
	}
	o.handlers["PUT"]["/categories/{id}"] = categories.NewUpdateCategory(o.context, o.CategoriesUpdateCategoryHandler)

	if o.handlers["PUT"] == nil {
		o.handlers["PUT"] = make(map[string]http.Handler)
	}
	o.handlers["PUT"]["/descriptors/{id}"] = descriptors.NewUpdateDescriptor(o.context, o.DescriptorsUpdateDescriptorHandler)

	if o.handlers["PUT"] == nil {
		o.handlers["PUT"] = make(map[string]http.Handler)
	}
	o.handlers["PUT"]["/details/{id}"] = details.NewUpdateDetail(o.context, o.DetailsUpdateDetailHandler)

	if o.handlers["PUT"] == nil {
		o.handlers["PUT"] = make(map[string]http.Handler)
	}
	o.handlers["PUT"]["/items/{id}"] = items.NewUpdateItem(o.context, o.ItemsUpdateItemHandler)

	if o.handlers["PUT"] == nil {
		o.handlers["PUT"] = make(map[string]http.Handler)
	}
	o.handlers["PUT"]["/subcategories/{id}"] = subcategories.NewUpdateSubCategory(o.context, o.SubcategoriesUpdateSubCategoryHandler)

	if o.handlers["PUT"] == nil {
		o.handlers["PUT"] = make(map[string]http.Handler)
	}
	o.handlers["PUT"]["/users/{id}"] = users.NewUpdateUser(o.context, o.UsersUpdateUserHandler)

}

// Serve creates a http handler to serve the API over HTTP
// can be used directly in http.ListenAndServe(":8000", api.Serve(nil))
func (o *WornOutAPI) Serve(builder middleware.Builder) http.Handler {
	o.Init()

	if o.Middleware != nil {
		return o.Middleware(builder)
	}
	return o.context.APIHandler(builder)
}

// Init allows you to just initialize the handler cache, you can then recompose the middelware as you see fit
func (o *WornOutAPI) Init() {
	if len(o.handlers) == 0 {
		o.initHandlerCache()
	}
}
