// Code generated by go-swagger; DO NOT EDIT.

package subcategories

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the generate command

import (
	"net/http"

	middleware "github.com/go-openapi/runtime/middleware"
)

// DeleteSubCategoriesByCategoryHandlerFunc turns a function with the right signature into a delete sub categories by category handler
type DeleteSubCategoriesByCategoryHandlerFunc func(DeleteSubCategoriesByCategoryParams) middleware.Responder

// Handle executing the request and returning a response
func (fn DeleteSubCategoriesByCategoryHandlerFunc) Handle(params DeleteSubCategoriesByCategoryParams) middleware.Responder {
	return fn(params)
}

// DeleteSubCategoriesByCategoryHandler interface for that can handle valid delete sub categories by category params
type DeleteSubCategoriesByCategoryHandler interface {
	Handle(DeleteSubCategoriesByCategoryParams) middleware.Responder
}

// NewDeleteSubCategoriesByCategory creates a new http.Handler for the delete sub categories by category operation
func NewDeleteSubCategoriesByCategory(ctx *middleware.Context, handler DeleteSubCategoriesByCategoryHandler) *DeleteSubCategoriesByCategory {
	return &DeleteSubCategoriesByCategory{Context: ctx, Handler: handler}
}

/*DeleteSubCategoriesByCategory swagger:route DELETE /catagories/{id}/subcategories Subcategories deleteSubCategoriesByCategory

Delete all SubCategories By Category

removes all subcategories from a given category.

*/
type DeleteSubCategoriesByCategory struct {
	Context *middleware.Context
	Handler DeleteSubCategoriesByCategoryHandler
}

func (o *DeleteSubCategoriesByCategory) ServeHTTP(rw http.ResponseWriter, r *http.Request) {
	route, rCtx, _ := o.Context.RouteInfo(r)
	if rCtx != nil {
		r = rCtx
	}
	var Params = NewDeleteSubCategoriesByCategoryParams()

	if err := o.Context.BindValidRequest(r, route, &Params); err != nil { // bind params
		o.Context.Respond(rw, r, route.Produces, route, err)
		return
	}

	res := o.Handler.Handle(Params) // actually handle the request

	o.Context.Respond(rw, r, route.Produces, route, res)

}
