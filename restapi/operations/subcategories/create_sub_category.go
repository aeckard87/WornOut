// Code generated by go-swagger; DO NOT EDIT.

package subcategories

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the generate command

import (
	"net/http"

	middleware "github.com/go-openapi/runtime/middleware"
)

// CreateSubCategoryHandlerFunc turns a function with the right signature into a create sub category handler
type CreateSubCategoryHandlerFunc func(CreateSubCategoryParams) middleware.Responder

// Handle executing the request and returning a response
func (fn CreateSubCategoryHandlerFunc) Handle(params CreateSubCategoryParams) middleware.Responder {
	return fn(params)
}

// CreateSubCategoryHandler interface for that can handle valid create sub category params
type CreateSubCategoryHandler interface {
	Handle(CreateSubCategoryParams) middleware.Responder
}

// NewCreateSubCategory creates a new http.Handler for the create sub category operation
func NewCreateSubCategory(ctx *middleware.Context, handler CreateSubCategoryHandler) *CreateSubCategory {
	return &CreateSubCategory{Context: ctx, Handler: handler}
}

/*CreateSubCategory swagger:route POST /subcategories Subcategories createSubCategory

Create a SubCategory

*/
type CreateSubCategory struct {
	Context *middleware.Context
	Handler CreateSubCategoryHandler
}

func (o *CreateSubCategory) ServeHTTP(rw http.ResponseWriter, r *http.Request) {
	route, rCtx, _ := o.Context.RouteInfo(r)
	if rCtx != nil {
		r = rCtx
	}
	var Params = NewCreateSubCategoryParams()

	if err := o.Context.BindValidRequest(r, route, &Params); err != nil { // bind params
		o.Context.Respond(rw, r, route.Produces, route, err)
		return
	}

	res := o.Handler.Handle(Params) // actually handle the request

	o.Context.Respond(rw, r, route.Produces, route, res)

}
