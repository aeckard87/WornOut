// Code generated by go-swagger; DO NOT EDIT.

package categories

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the generate command

import (
	"net/http"

	middleware "github.com/go-openapi/runtime/middleware"
)

// DeleteCategoriesHandlerFunc turns a function with the right signature into a delete categories handler
type DeleteCategoriesHandlerFunc func(DeleteCategoriesParams) middleware.Responder

// Handle executing the request and returning a response
func (fn DeleteCategoriesHandlerFunc) Handle(params DeleteCategoriesParams) middleware.Responder {
	return fn(params)
}

// DeleteCategoriesHandler interface for that can handle valid delete categories params
type DeleteCategoriesHandler interface {
	Handle(DeleteCategoriesParams) middleware.Responder
}

// NewDeleteCategories creates a new http.Handler for the delete categories operation
func NewDeleteCategories(ctx *middleware.Context, handler DeleteCategoriesHandler) *DeleteCategories {
	return &DeleteCategories{Context: ctx, Handler: handler}
}

/*DeleteCategories swagger:route DELETE /categories Categories deleteCategories

Delete all Categories

a category deletion will also remove all of its subcategories.

*/
type DeleteCategories struct {
	Context *middleware.Context
	Handler DeleteCategoriesHandler
}

func (o *DeleteCategories) ServeHTTP(rw http.ResponseWriter, r *http.Request) {
	route, rCtx, _ := o.Context.RouteInfo(r)
	if rCtx != nil {
		r = rCtx
	}
	var Params = NewDeleteCategoriesParams()

	if err := o.Context.BindValidRequest(r, route, &Params); err != nil { // bind params
		o.Context.Respond(rw, r, route.Produces, route, err)
		return
	}

	res := o.Handler.Handle(Params) // actually handle the request

	o.Context.Respond(rw, r, route.Produces, route, res)

}
