// Code generated by go-swagger; DO NOT EDIT.

package categories

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the generate command

import (
	"net/http"

	middleware "github.com/go-openapi/runtime/middleware"
)

// DeleteCategoryHandlerFunc turns a function with the right signature into a delete category handler
type DeleteCategoryHandlerFunc func(DeleteCategoryParams) middleware.Responder

// Handle executing the request and returning a response
func (fn DeleteCategoryHandlerFunc) Handle(params DeleteCategoryParams) middleware.Responder {
	return fn(params)
}

// DeleteCategoryHandler interface for that can handle valid delete category params
type DeleteCategoryHandler interface {
	Handle(DeleteCategoryParams) middleware.Responder
}

// NewDeleteCategory creates a new http.Handler for the delete category operation
func NewDeleteCategory(ctx *middleware.Context, handler DeleteCategoryHandler) *DeleteCategory {
	return &DeleteCategory{Context: ctx, Handler: handler}
}

/*DeleteCategory swagger:route DELETE /categories/{id} Categories deleteCategory

Delete Category

A category deletion will also remove all of its subcategories.

*/
type DeleteCategory struct {
	Context *middleware.Context
	Handler DeleteCategoryHandler
}

func (o *DeleteCategory) ServeHTTP(rw http.ResponseWriter, r *http.Request) {
	route, rCtx, _ := o.Context.RouteInfo(r)
	if rCtx != nil {
		r = rCtx
	}
	var Params = NewDeleteCategoryParams()

	if err := o.Context.BindValidRequest(r, route, &Params); err != nil { // bind params
		o.Context.Respond(rw, r, route.Produces, route, err)
		return
	}

	res := o.Handler.Handle(Params) // actually handle the request

	o.Context.Respond(rw, r, route.Produces, route, res)

}
